{"ast":null,"code":"var _jsxFileName = \"/Users/abaddha/Documents/Teksystems/code/tekcamp/4-react/social-media-site/src/components/CommentList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\"; // import Grid from \"@mui/material/Grid\";\n// import Paper from \"@mui/material/Paper\";\n\nimport Comment from \"./Comment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = process.env.REACT_APP_API_KEY;\nexport default function CommentList(props) {\n  _s();\n\n  const [comments, setComments] = useState([]);\n  const updatedPost = props.updatedPost;\n  const postid = props.postid;\n  useEffect(() => {\n    let isMounted = true;\n    fetch(`https://dummyapi.io/data/v1/post/${postid}/comment`, {\n      headers: {\n        \"app-id\": API_KEY\n      }\n    }).then(response => response.json()).then(jsonResponse => {\n      if (isMounted) setComments(jsonResponse.data);\n    });\n  }, [updatedPost]);\n  let commentList = comments.map(comment => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Comment, {\n        comment: comment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, comment.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), commentList]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CommentList, \"ByfV/t0DOiJY0nGyfgV+6QjIggQ=\");\n\n_c = CommentList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentList\");","map":{"version":3,"sources":["/Users/abaddha/Documents/Teksystems/code/tekcamp/4-react/social-media-site/src/components/CommentList.js"],"names":["React","useEffect","useState","Comment","API_KEY","process","env","REACT_APP_API_KEY","CommentList","props","comments","setComments","updatedPost","postid","isMounted","fetch","headers","then","response","json","jsonResponse","data","commentList","map","comment","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CAEA;AACA;;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AACzC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMU,WAAW,GAAGH,KAAK,CAACG,WAA1B;AACA,QAAMC,MAAM,GAAGJ,KAAK,CAACI,MAArB;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,SAAS,GAAG,IAAhB;AACAC,IAAAA,KAAK,CAAE,oCAAmCF,MAAO,UAA5C,EAAuD;AAC1DG,MAAAA,OAAO,EAAE;AACP,kBAAUZ;AADH;AADiD,KAAvD,CAAL,CAKGa,IALH,CAKSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EALtB,EAMGF,IANH,CAMSG,YAAD,IAAkB;AACtB,UAAIN,SAAJ,EAAeH,WAAW,CAACS,YAAY,CAACC,IAAd,CAAX;AAChB,KARH;AASD,GAXQ,EAWN,CAACT,WAAD,CAXM,CAAT;AAaA,MAAIU,WAAW,GAAGZ,QAAQ,CAACa,GAAT,CAAcC,OAAD,IAAa;AAC1C,wBACE;AAAA,6BACE,QAAC,OAAD;AAAS,QAAA,OAAO,EAAEA;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF,OAAUA,OAAO,CAACC,EAAlB;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GANiB,CAAlB;AAQA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGH,WAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GAhCuBd,W;;KAAAA,W","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n// import Grid from \"@mui/material/Grid\";\n// import Paper from \"@mui/material/Paper\";\nimport Comment from \"./Comment\";\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nexport default function CommentList(props) {\n  const [comments, setComments] = useState([]);\n  const updatedPost = props.updatedPost;\n  const postid = props.postid;\n\n  useEffect(() => {\n    let isMounted = true;\n    fetch(`https://dummyapi.io/data/v1/post/${postid}/comment`, {\n      headers: {\n        \"app-id\": API_KEY,\n      },\n    })\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        if (isMounted) setComments(jsonResponse.data);\n      });\n  }, [updatedPost]);\n\n  let commentList = comments.map((comment) => {\n    return (\n      <div key={comment.id}>\n        <Comment comment={comment} />\n      </div>\n    );\n  });\n\n  return (\n    <div>\n      <h5>Comments</h5>\n      {commentList}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}